syntax = "proto3";

option java_package = "com.lol.fwk.protobuf";
option java_outer_classname = "MessageDownProto";

//服务响应下行消息
message MessageDown{
    MsgHeader header = 1;
    MsgDownBody body = 2;
}

//消息头
message MsgHeader{

	//一级协议 用于区分所属模块
	int32 msgType = 1;

    //二级协议 用于区分 模块下所属子模块
    int32 area = 2;

    // 三级协议  用于区分当前处理逻辑功能
    int32 cmd = 3;

    // token, 认证授权
    string token = 4;

}

//下行消息体
message MsgDownBody{
    LoginDownBody login = 1;
    PlayerDownBody player = 2;
    SelectDownBody select = 3;
    FightDownBody fight = 4;
}

message LoginDownBody{
    int32 result = 1;
}

message PlayerDownBody{
    int32 create = 1;
    Player playerModel = 2;
}

message SelectDownBody{
    string talkRes = 1;
    int32 playerId = 2;
    SelectModel select = 3;
    SelectRoom selectRoom = 4;
}

message FightDownBody{
    FightRoomModel fightRoom = 1;
    MoveInfo moveInfo = 2;
    AttackInfo attackInfo = 3;
    DamageInfo damageInfo = 4;
    FightSkill fightSkill = 5;
    SkillAtkModel skillAtk = 6;
}

message Player{
    int32 id = 1;
    string nickName = 2;
    int32 level = 3;
    int32 winCount = 4;
    int32 loseCount = 5;
    int32 ranCount = 6;
    //repeated int32 hero = 7[packed = true];
    //格式 1,2,3,4,5,6,7,8
    string hero = 7;
}

message SelectModel{
    int32 playerId = 1;
    string nickName = 2;
    int32 hero = 3;
    bool enter = 4;
    bool ready = 5;
}

message SelectRoom{
    repeated SelectModel teamOne = 1[packed = false];
    repeated SelectModel teamTwo = 2[packed = false];
}

message FightRoomModel{
    repeated FightModel teamOne = 1[packed = false]; //只能打包原始数据类型
    repeated FightModel teamTwo = 2[packed = false];
}

message MoveInfo{
    int32 playerId = 1;
    float x = 2;
    float y = 3;
    float z = 4;
}

message DamageInfo{
    int32 playerId = 1;
    int32 skill = 2;
    repeated Target target = 3[packed = false];
}

//用于支持 DamageInfo.target 二维数组,因此客户端要封装Target实体类
message Target{
    repeated int32 target = 1[packed = true];
}

message SkillAtkModel{
    int32 playerId = 1; //玩家ID
    int32 type = 2; //0表示目标攻击 1表示指定点
    int32 skill = 3; //技能
    repeated float position = 4[packed = true]; //位置
    int32 target = 5; //目标
}

message FightModel{

    enum ModelType {
        BUILD = 0;
        HUMAN = 1;
    }

    int32 id = 1; //战斗区域中 唯一识别码
    ModelType type = 2; //标识当前生命体是属于什么类别
    int32 code = 3; //模型唯一识别码 但是战斗中会有多个相同兵种出现 所以这里只用于标识形象急获取对应的数据
    int32 hp = 4; //当前血量
    int32 maxHp = 5; //最大血量
    int32 atk = 6; //攻击
    int32 def = 7; //防御
    string name = 8; //名称
    float speed = 9; //移动速度
    float aSpeed = 10; //攻击速度
    float aRange = 11; //攻击范围
    float eyeRange = 12; //视野范围
    int32 team = 13; //单位所在的队伍
}

message AttackInfo{
    int32 playerId = 1; //攻击者ID
    int32 targetId = 2; //被攻击者ID
}

message FightSkill{

    enum SkillType{
        SELF_CENTER = 0;
        TARGET_CENTER = 1;
        POSITION = 2;
        PASSIVE = 3;
    }

    enum SkillTarget{
        SELF = 0;
        F_H = 1;
        F_N_B = 2;
        F_ALL = 4;
        E_H = 5;
        E_N_B = 6;
        E_S_N = 7;
        N_F_ALL = 8;
    }

    int32 code = 1; //策划编码
    int32 level = 2; //等级
    int32 nextLevel = 3; //学习需要角色等级
    int32 time = 4; //冷却时间--ms
    string name = 5; //技能名称
    float range = 6; //释放距离
    string info = 7; //技能描述
    SkillTarget target = 8; //技能伤害目标类型
    SkillType type = 9; //技能释放类型
}

